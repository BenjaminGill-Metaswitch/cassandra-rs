use cql::*;

#[pub]
cql_statement -> ParsedCqlStatement
    = select_statement / insert_statement / delete_statement / update_statement

select_statement -> ParsedCqlStatement
    = select fields_or_star from table where_clauses? order_by_clause? limit_clause? { ParsedCqlStatement::Select }

insert_statement -> ParsedCqlStatement
    = "insert" __ "into" __ table __ "(" fields ")" values
        "(" placeholder ++ ","  ")"
    { ParsedCqlStatement::Insert }

delete_statement -> ParsedCqlStatement
    = "delete"i { ParsedCqlStatement::Delete }

update_statement -> ParsedCqlStatement
    = "update"i { ParsedCqlStatement::Update }

#[pub]
where_clauses = where predicates

predicates = predicate ++ and

#[pub]
predicate = field op placeholder

op = '=' / '<' / '>' / '<=' / '>=' / "contains"i / "contains key"i

placeholder = __ "?" __
and = __ "and"i __
from = __ "from"i __
where = __ "where"i  __
star = __ "*" __
select = __ "select"i __
field = __ [a-zA-Z0-9]+ __
values = __ "values"i __

order_by_clause = "order" __ "by" __ field __ order_direction? {}

asc = "asc"i
desc = "desc"i
order_direction = asc / desc


#[pub]
fields = (field ++ ",")
fields_or_star = fields / star

table = [a-zA-Z]+
limit = "limit"i
int = [1-9][0-9]*

limit_clause = __ limit __ int __

__ = (whitespace / eol)*

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"
